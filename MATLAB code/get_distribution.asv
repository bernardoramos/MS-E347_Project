function [L, N] = get_distribution



get_distribution <- function(theta, T, method="fourier", distr="N") {
  if (distr == "N") {
    u <- c(0, 1)
  } else {
    u <- c(1, 0)
  }
  if (method == "fourier") {
    adv_settings <- mget(c("truncate_inverse_transform", "number_points_transform"), ifnotfound = c(FALSE, n*2), envir=.GlobalEnv)
    N <- adv_settings$number_points_transform
    if (distr == "N") {
      u <- matrix(c(0,1), nrow=N, ncol=2, byrow=TRUE)
    } else {
      u <- matrix(c(1,0), nrow=N, ncol=2, byrow=TRUE)
    }
    u <- u * 1i*2*pi*(0:(N-1))/N
    alp <- a(u, theta, T, N=12) 
    bet <- b(u, theta, T, N=12) 
    lambda0 <- theta[4]
    transform <- exp(alp + bet * lambda0)
    distr <- fft(transform, inverse=TRUE)
    distr <- distr/length(distr) #We divide to normalize the transform
    distr <- Mod(distr)
    if (adv_settings$truncate_inverse_transform) {
      distr <- distr[1:floor(N*0.6)]/sum(distr[1:floor(N*0.6)]) #We normalize the distribution ## TODO: what to do about this?
    } else {
      distr <- distr[1:N]/sum(distr[1:N]) #We normalize the distribution
    }
  } else if (method == "derivative") {
    if (method != "N") {warning("Using the derivative method for the distribution of L")}
  }
  return(distr)
}